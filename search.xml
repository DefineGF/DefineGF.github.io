<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>gc-c</title>
    <url>/2023/05/15/gc-c/</url>
    <content><![CDATA[<h4 id="垃圾回收简易版-（C）"><a href="#垃圾回收简易版-（C）" class="headerlink" title="垃圾回收简易版 （C）"></a>垃圾回收简易版 （C）</h4><h5 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h5><ul>
<li>由 VM 负责创建对象，并将对象压入维护对象指针的栈中；用不到的对象（需要被回收）出栈；</li>
<li>VM 维护列表头，用以记录经由 VM 创建的所有对象（包括已经栈中存放的）；</li>
<li>触发 gc 时候，通过遍历列表，标记存放在栈中的对象（不回收），然后调用 sweep 执行回收内存的操作！</li>
</ul>
<h5 id="相关对象"><a href="#相关对象" class="headerlink" title="相关对象"></a>相关对象</h5><p>对象类型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  OBJ_INT,</span><br><span class="line">  OBJ_PAIR</span><br><span class="line">&#125; ObjectType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ObjectType type;		<span class="comment">// 对象类型</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> marked;	<span class="comment">// 记录是否需要被回收</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sObject</span> *<span class="title">next</span>;</span> <span class="comment">// 堆上下一个对象</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">int</span> value;					<span class="comment">// INT 对象</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>						// <span class="title">PAIR</span> 对象</span></span><br><span class="line"><span class="class">    &#123;</span>	</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">sObject</span> *<span class="title">first</span>;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">sObject</span> *<span class="title">second</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; Object;</span><br></pre></td></tr></table></figure>

<p>虚拟机：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_MAX 256      <span class="comment">/* 栈容量 */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Object *<span class="built_in">stack</span>[STACK_MAX]; <span class="comment">// 存放不需要回收的对象指针</span></span><br><span class="line">  <span class="type">int</span> stackSize;			<span class="comment">// 栈中元素数量</span></span><br><span class="line"></span><br><span class="line">  Object *firstObject;		<span class="comment">// 堆中对象的头指针</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> numObjects;			<span class="comment">// 堆中对象的数量</span></span><br><span class="line">  <span class="type">int</span> maxObjects;			<span class="comment">// 触发gc 的阈值</span></span><br><span class="line">&#125; VM;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意区分 stackSize 和 numObjects </p>
</blockquote>
<h5 id="重要函数"><a href="#重要函数" class="headerlink" title="重要函数"></a>重要函数</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VM *<span class="title function_">newVM</span><span class="params">()</span>;                                <span class="comment">// 创建虚拟机</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeVM</span><span class="params">(VM *vm)</span>;                        <span class="comment">// 释放虚拟机</span></span><br><span class="line">Object *<span class="title function_">newObject</span><span class="params">(VM *vm, ObjectType type)</span>; <span class="comment">// 经由虚拟机创建对象</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(VM *vm, Object *value)</span>;           <span class="comment">// 对象放入栈中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pushInt</span><span class="params">(VM *vm, <span class="type">int</span> intValue)</span>;         <span class="comment">// 创建 Int 类型对象并入栈</span></span><br><span class="line">Object *<span class="title function_">pushPair</span><span class="params">(VM *vm)</span>;                   <span class="comment">// 创建 Pair 类型对象并入栈</span></span><br><span class="line">Object *<span class="title function_">pop</span><span class="params">(VM *vm)</span>;                        <span class="comment">// 对象出栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mark</span><span class="params">(Object *object)</span>;                  <span class="comment">// 标记对象-不回收</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gc</span><span class="params">(VM *vm)</span>;                            <span class="comment">// 触发垃圾回收</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">markAll</span><span class="params">(VM *vm)</span>;                       <span class="comment">// 标记所有在栈中的对象</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sweep</span><span class="params">(VM *vm)</span>;                         <span class="comment">// 回收所有未标记的对象</span></span><br></pre></td></tr></table></figure>



<h5 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_OBJ_NUM_MAX 8 <span class="comment">/* 触发GC 回收 */</span></span></span><br><span class="line"></span><br><span class="line">VM *<span class="title function_">newVM</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  VM *vm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(VM));</span><br><span class="line">  vm-&gt;stackSize = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;firstObject = <span class="literal">NULL</span>;</span><br><span class="line">  vm-&gt;numObjects = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;maxObjects = INIT_OBJ_NUM_MAX;</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><p>vm 创建对象：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Object *<span class="title function_">newObject</span><span class="params">(VM *vm, ObjectType type)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (vm-&gt;numObjects == vm-&gt;maxObjects)</span><br><span class="line">  &#123;</span><br><span class="line">    gc(vm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Object *object = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Object));</span><br><span class="line">  object-&gt;type = type;</span><br><span class="line">  object-&gt;next = vm-&gt;firstObject;</span><br><span class="line">  object-&gt;marked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  vm-&gt;firstObject = object;</span><br><span class="line">  vm-&gt;numObjects++;</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>INT：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pushInt</span><span class="params">(VM *vm, <span class="type">int</span> intValue)</span></span><br><span class="line">&#123;</span><br><span class="line">  Object *object = newObject(vm, OBJ_INT);</span><br><span class="line">  object-&gt;value = intValue;</span><br><span class="line">  push(vm, object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PAIR：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Object *<span class="title function_">pushPair</span><span class="params">(VM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  Object *object = newObject(vm, OBJ_PAIR);</span><br><span class="line">  object-&gt;second = pop(vm);</span><br><span class="line">  object-&gt;first = pop(vm);</span><br><span class="line"></span><br><span class="line">  push(vm, object);</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对象入栈出栈"><a href="#对象入栈出栈" class="headerlink" title="对象入栈出栈"></a>对象入栈出栈</h5><p>入栈：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(VM *vm, Object *value)</span></span><br><span class="line">&#123;</span><br><span class="line">  assert(vm-&gt;stackSize &lt; STACK_MAX, <span class="string">&quot;Stack overflow!&quot;</span>);</span><br><span class="line">  vm-&gt;<span class="built_in">stack</span>[vm-&gt;stackSize++] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出栈：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Object *<span class="title function_">pop</span><span class="params">(VM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  assert(vm-&gt;stackSize &gt; <span class="number">0</span>, <span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> vm-&gt;<span class="built_in">stack</span>[--vm-&gt;stackSize];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="回收"><a href="#回收" class="headerlink" title="回收"></a>回收</h5><p>mark：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">mark</span><span class="params">(Object *object)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (object-&gt;marked)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  object-&gt;marked = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (object-&gt;type == OBJ_PAIR)</span><br><span class="line">  &#123;</span><br><span class="line">    mark(object-&gt;first);</span><br><span class="line">    mark(object-&gt;second);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于Pair类型的对象，既可以引用 Int 类型的对象，也可以递归引用 Pair 类型的对象！</p>
<p>因此标记对象的时候，既要递归的标记，又要防止无限制遍历！</p>
<p>markAll：标记栈中所有对象不回收</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">markAll</span><span class="params">(VM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vm-&gt;stackSize; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    mark(vm-&gt;<span class="built_in">stack</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>gc：垃圾回收主要调用者</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">gc</span><span class="params">(VM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> numObjects = vm-&gt;numObjects;</span><br><span class="line"></span><br><span class="line">  markAll(vm);</span><br><span class="line">  sweep(vm);</span><br><span class="line"></span><br><span class="line">  vm-&gt;maxObjects = vm-&gt;numObjects == <span class="number">0</span> ? INIT_OBJ_NUM_MAX : vm-&gt;numObjects * <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Collected %d objects, %d remaining.\n&quot;</span>, numObjects - vm-&gt;numObjects, vm-&gt;numObjects);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>sweep：内存回收的主要执行者</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sweep</span><span class="params">(VM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  Object **object = &amp;vm-&gt;firstObject;</span><br><span class="line">  <span class="keyword">while</span> (*object)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(*object)-&gt;marked)</span><br><span class="line">    &#123;</span><br><span class="line">      Object *unreached = *object;</span><br><span class="line">      *object = unreached-&gt;next;</span><br><span class="line">      <span class="built_in">free</span>(unreached);</span><br><span class="line">      vm-&gt;numObjects--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      (*object)-&gt;marked = <span class="number">0</span>;</span><br><span class="line">      object = &amp;(*object)-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="释放虚拟机"><a href="#释放虚拟机" class="headerlink" title="释放虚拟机"></a>释放虚拟机</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">freeVM</span><span class="params">(VM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  vm-&gt;stackSize = <span class="number">0</span>;</span><br><span class="line">  gc(vm);</span><br><span class="line">  <span class="built_in">free</span>(vm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时将栈元素个数设置为0，这样当gc的时候，markAll 不会再将栈内的对象标记为不可回收了；</p>
<p>因此等下一步 sweep 时候，会将链表上所有的对象回收！</p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test_pair1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  VM *vm = newVM();				<span class="comment">// 创建虚拟机</span></span><br><span class="line">  pushInt(vm, <span class="number">1</span>);				<span class="comment">// 创建 INT 对象并入栈</span></span><br><span class="line">  pushInt(vm, <span class="number">2</span>);				<span class="comment">// 创建 INT 对象并入栈</span></span><br><span class="line">  Object *a = pushPair(vm);		<span class="comment">// 利用栈顶两个INT对象创建 Pair 对象并入栈 （此时栈内只有 a 对象，但是堆上有 3 个对象）</span></span><br><span class="line"></span><br><span class="line">  pushInt(vm, <span class="number">3</span>);</span><br><span class="line">  pushInt(vm, <span class="number">4</span>);</span><br><span class="line">  Object *b = pushPair(vm);		<span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line">  gc(vm);		<span class="comment">// 栈内有两个对象 a, b，堆上有6个对象，但是4个INT对象都被 2 个Pair 对象引用</span></span><br><span class="line">    			<span class="comment">// 因此本次回收 0 个对象</span></span><br><span class="line"></span><br><span class="line">  freeVM(vm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>完整代码：<a href="https://github.com/DefineGF/CComponents/tree/main/gc-c">https://github.com/DefineGF/CComponents/tree/main/gc-c</a></p>
<p>参考链接：<a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/">http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/</a></p>
]]></content>
      <tags>
        <tag>gc</tag>
        <tag>c</tag>
        <tag>标记清除</tag>
      </tags>
  </entry>
  <entry>
    <title>brk-sbrk</title>
    <url>/2023/05/18/brk-sbrk/</url>
    <content><![CDATA[<h5 id="进程内存布局"><a href="#进程内存布局" class="headerlink" title="进程内存布局"></a>进程内存布局</h5><p><img src="/./images/brk-sbrk-images/9f7501cc9c31df975026e423321f75a3.png" alt="img"></p>
<h4 id="brk-和-sbrk"><a href="#brk-和-sbrk" class="headerlink" title="brk 和 sbrk"></a>brk 和 sbrk</h4><h5 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">brk</span><span class="params">(<span class="type">void</span> * addr)</span>; </span><br><span class="line"><span class="type">void</span> * <span class="title function_">sbrk</span><span class="params">(<span class="type">intptr_t</span> increment)</span>;</span><br></pre></td></tr></table></figure>



<h5 id="brk"><a href="#brk" class="headerlink" title="brk"></a>brk</h5><p>程序中断点（program break）初始化值是未初始化的数据段的结束位置；</p>
<p>当brk参数中 addr 值合理并未超过最大允许范围时，将 program break 值设为 addr；</p>
<p>返回值：</p>
<ul>
<li>0：成功！</li>
<li>-1：失败，并设置 error 值为 ENOMEM；</li>
</ul>
<h5 id="sbrk"><a href="#sbrk" class="headerlink" title="sbrk"></a>sbrk</h5><p>通过函数参数 increment 设置程序中断点的移动范围，当 increment值：</p>
<ul>
<li>正：中断点向后移动，返回值为移动前位置；</li>
<li>0：返回当前中断点位置；</li>
<li>负：向前移动中断点，相当于释放内存，返回值无意义！</li>
</ul>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>一般使用 sbrk 分配内存，使用brk释放内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* old = sbrk(SIZE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SIZE; ++i) &#123;</span><br><span class="line">        *((<span class="type">char</span>*)old) = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = brk(old);</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;release error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ans == <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;release successful!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h4><p>获取 exe_name 对应的进程 id：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -e | grep &#x27;exe_name&#x27; | awk &#x27;&#123;print $1&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>通过id 获得内存布局信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/pid/maps</span><br></pre></td></tr></table></figure>



<h5 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* addr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    addr = sbrk(<span class="number">0</span>);</span><br><span class="line">    addr = sbrk(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对 9、10 行断点调试，addr 值均为 <code>0x555555602000</code>；(看着像是废话)</p>
<h5 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* addr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    addr = sbrk(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid: %d\n&quot;</span>, );</span><br><span class="line">    addr = sbrk(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>断点调试9、10、11行：</p>
<p>第9行执行完毕时，addr 值为：0x555555602000，此时查看进程内存布局：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">555555400000-555555401000 r-xp 00000000 08:10 50993                      /home/cheng/Learning/sbrk_test</span><br><span class="line">555555600000-555555601000 r--p 00000000 08:10 50993                      /home/cheng/Learning/sbrk_test</span><br><span class="line">555555601000-555555602000 rw-p 00001000 08:10 50993                      /home/cheng/Learning/sbrk_test</span><br><span class="line">7ffff79e2000-7ffff7bc9000 r-xp 00000000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7bc9000-7ffff7dc9000 ---p 001e7000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dc9000-7ffff7dcd000 r--p 001e7000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dcd000-7ffff7dcf000 rw-p 001eb000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dcf000-7ffff7dd3000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffff7dd3000-7ffff7dfc000 r-xp 00000000 08:10 2420                       /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7fed000-7ffff7fef000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffff7ff7000-7ffff7ffb000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffff7ffb000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">7ffff7ffc000-7ffff7ffd000 r--p 00029000 08:10 2420                       /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7ffd000-7ffff7ffe000 rw-p 0002a000 08:10 2420                       /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]</span><br></pre></td></tr></table></figure>



<p>继续执行第10行，内存布局如下, 多出一条 [heap] 的记录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">555555400000-555555401000 r-xp 00000000 08:10 50993                      /home/cheng/Learning/sbrk_test</span><br><span class="line">555555600000-555555601000 r--p 00000000 08:10 50993                      /home/cheng/Learning/sbrk_test</span><br><span class="line">555555601000-555555602000 rw-p 00001000 08:10 50993                      /home/cheng/Learning/sbrk_test</span><br><span class="line"></span><br><span class="line">555555602000-555555623000 rw-p 00000000 00:00 0                          [heap]</span><br><span class="line"></span><br><span class="line">7ffff79e2000-7ffff7bc9000 r-xp 00000000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7bc9000-7ffff7dc9000 ---p 001e7000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dc9000-7ffff7dcd000 r--p 001e7000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dcd000-7ffff7dcf000 rw-p 001eb000 08:10 2444                       /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dcf000-7ffff7dd3000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffff7dd3000-7ffff7dfc000 r-xp 00000000 08:10 2420                       /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7fed000-7ffff7fef000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffff7ff7000-7ffff7ffb000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffff7ffb000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">7ffff7ffc000-7ffff7ffd000 r--p 00029000 08:10 2420                       /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7ffd000-7ffff7ffe000 rw-p 0002a000 08:10 2420                       /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]</span><br></pre></td></tr></table></figure>



<p>执行第11行之后，会发现 addr 的值变为：<strong>0x555555623000</strong>， 即内存布局中heap的最后地址！</p>
<p>因此我们发现，在两个sbrk之间调用 printf，会更改 program break 的值。于是我们将 第10 行的printf 分别替换成一下代码：</p>
<ol>
<li><pre><code class="c">int num = 11;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ```c</span><br><span class="line">   int *num = (int*)malloc(sizeof(int)); </span><br><span class="line">   *num = 11;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<p>结论：</p>
<p><strong>代码1</strong> 并不会更改 program break 的值， 同时内存布局中也不会出现heap的条目，原因可能是 num 作为局部变量，并不会在heap中保存；</p>
<p><strong>代码2</strong> 会更改 program break的值（类似printf），同时内存布局中也会出现 heap的条目，原因是 num 作为指针指向 malloc 在heap 分配的内存！有意思的是，通过debug 发现 num 指向的heap 地址并不是 heap 起始地址 555555602000， 而是 0x555555602260！</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>memory</tag>
      </tags>
  </entry>
  <entry>
    <title>mini-malloc</title>
    <url>/2023/05/18/mini-malloc/</url>
    <content><![CDATA[<h3 id="mini-malloc"><a href="#mini-malloc" class="headerlink" title="mini - malloc"></a>mini - malloc</h3><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16</span></span><br><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line"><span class="type">void</span>* p = <span class="built_in">malloc</span>(SIZE);</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>申请内存时，指定申请内存的大小，并返回申请内存的起始地址；</p>
</li>
<li><p>释放内存时，只需要传入内存的起始地址即可，无需传入需要释放内存的大小。</p>
</li>
</ul>
<p>具体原理无非是申请 SIZE 内存时候，分配的内存实质上是一小段 cookie + SIZE，只不过返回SIZE对应的起始地址；释放时候再根据 cookie 大小偏移，获取cookie中记录的内存的大小进行释放。相关文章有很多，具体直接google即可！</p>
<h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><h5 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	<span class="comment">// printf ...</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> <span class="comment">// strcpy ...</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span> <span class="comment">// assert ...</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> <span class="comment">// sbrk   ...</span></span></span><br></pre></td></tr></table></figure>

<h5 id="结构体及相关函数"><a href="#结构体及相关函数" class="headerlink" title="结构体及相关函数"></a>结构体及相关函数</h5><p>模拟malloc中的cookie：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">size_t</span> size;				<span class="comment">// 记录内容部分占用大小</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span> *<span class="title">next</span>;</span>  <span class="comment">// 下一个申请的内存块</span></span><br><span class="line">  <span class="type">int</span> <span class="built_in">free</span>;					<span class="comment">// 记录当前block 是否空闲</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> META_SIZE sizeof(struct block_meta) <span class="comment">// sizeof(struct block_meta) = 24</span></span></span><br></pre></td></tr></table></figure>



<p>全局变量：void *global_base &#x3D; NULL; 用于记录申请的block的头</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> block_meta *<span class="title function_">find_free_block</span><span class="params">(<span class="keyword">struct</span> block_meta **last, <span class="type">size_t</span> size)</span>;  <span class="comment">/* 按地址序, 搜索满足条件的空闲块 */</span></span><br><span class="line"><span class="keyword">struct</span> block_meta *<span class="title function_">request_space</span><span class="params">(<span class="keyword">struct</span> block_meta *last, <span class="type">size_t</span> size)</span>;     <span class="comment">/* 申请内存 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">my_malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;                                               <span class="comment">/* 简易实现 malloc */</span></span><br><span class="line"><span class="keyword">struct</span> block_meta *<span class="title function_">get_block_ptr</span><span class="params">(<span class="type">void</span> *ptr)</span>;                                <span class="comment">/* 由实内容的地址，获取 struct block_meta 头地址*/</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">get_real_ptr</span><span class="params">(<span class="keyword">struct</span> block_meta *ptr)</span>;                                 <span class="comment">/* 由struct block_meta 头地址，获得实内容的地址 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_free</span><span class="params">(<span class="type">void</span> *ptr)</span>;                                                    <span class="comment">/* 模拟实现内存回收 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">my_realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;                                   <span class="comment">/* 实现简易版 realloc */</span></span><br></pre></td></tr></table></figure>



<h5 id="void-my-malloc-size-t-size"><a href="#void-my-malloc-size-t-size" class="headerlink" title="void *my_malloc(size_t size)"></a>void *my_malloc(size_t size)</h5><p>整体流程如下：</p>
<ul>
<li><p>如果是首次调用（即还未有内存块），则直接调用 request_space 申请内存，并设置链表；</p>
</li>
<li><p>如果不是首次调用，首先需要通过 find_free_block 查找block 链中是否有 （空闲&amp;&amp; 大小合适）的 block：</p>
<ul>
<li>有，则直接返回空闲地址；</li>
<li>没有，则调用 request_space  申请；</li>
</ul>
</li>
</ul>
<p>最终返回的是不含 struct block_meta 头的首地址！具体实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">my_malloc</span><span class="params">(<span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span> *<span class="title">block</span>;</span></span><br><span class="line">  <span class="keyword">if</span> (!global_base)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 首次调用</span></span><br><span class="line">    block = request_space(<span class="literal">NULL</span>, size);</span><br><span class="line">    <span class="keyword">if</span> (!block)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    global_base = block;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 非首次调用</span></span><br><span class="line">    <span class="keyword">struct</span> block_meta *last = global_base;</span><br><span class="line">    block = find_free_block(&amp;last, size);</span><br><span class="line">    <span class="keyword">if</span> (!block)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 没有找到可用的空闲块</span></span><br><span class="line">      block = request_space(last, size);</span><br><span class="line">      <span class="keyword">if</span> (!block)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 找到可用的空闲块</span></span><br><span class="line">      block-&gt;<span class="built_in">free</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (block + <span class="number">1</span>); <span class="comment">// 这里 + 1表示返回偏移 struct block_meta，即真正内容的首地址（不含 cookie 头）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="struct-block-meta-request-space-struct-block-meta-last-size-t-size"><a href="#struct-block-meta-request-space-struct-block-meta-last-size-t-size" class="headerlink" title="struct block_meta *request_space(struct block_meta *last, size_t size)"></a>struct block_meta *request_space(struct block_meta *last, size_t size)</h5><p>核心逻辑通过 sbrk 来分配内存，具体可参见sbrk 和 brk 相关原理！ 具体实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> block_meta *<span class="title function_">request_space</span><span class="params">(<span class="keyword">struct</span> block_meta *last, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *old_addr;</span><br><span class="line">  old_addr = sbrk(<span class="number">0</span>); <span class="comment">// 原地址 </span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *request = sbrk(size + META_SIZE);</span><br><span class="line">  assert(old_addr == request);   <span class="comment">// Not thread safe.</span></span><br><span class="line">  <span class="keyword">if</span> (request == (<span class="type">void</span> *)<span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// sbrk failed.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span>* <span class="title">block</span> =</span> (<span class="keyword">struct</span> block_meta*)old_addr;</span><br><span class="line">  <span class="keyword">if</span> (last)</span><br><span class="line">  &#123;</span><br><span class="line">    last-&gt;next = block;</span><br><span class="line">  &#125;</span><br><span class="line">  block-&gt;size = size;</span><br><span class="line">  block-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  block-&gt;<span class="built_in">free</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据第 6 行可见，最终申请的是 size + META_SIZE （sizeof(struct block_meta）) 大小的内存！</p>
<p>返回给 my_malloc 的也是指向struct block_meta 头的地址，因此需要在 my_mallioc 中对地址进行偏移处理！</p>
<h5 id="struct-block-meta-find-free-block-struct-block-meta-last-size-t-size"><a href="#struct-block-meta-find-free-block-struct-block-meta-last-size-t-size" class="headerlink" title="struct block_meta *find_free_block(struct block_meta **last, size_t size)"></a>struct block_meta *find_free_block(struct block_meta **last, size_t size)</h5><p>自首节点进行遍历查找满足条件的空闲 block，并设置上一 block，即last，用以进一步设置 next 指针！详情如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> block_meta *<span class="title function_">find_free_block</span><span class="params">(<span class="keyword">struct</span> block_meta **last, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span> *<span class="title">current</span> =</span> global_base;</span><br><span class="line">  <span class="keyword">while</span> (current &amp;&amp; !(current-&gt;<span class="built_in">free</span> &amp;&amp; current-&gt;size &gt;= size))</span><br><span class="line">  &#123;</span><br><span class="line">    *last = current;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="void-my-free-void-ptr"><a href="#void-my-free-void-ptr" class="headerlink" title="void my_free(void *ptr)"></a>void my_free(void *ptr)</h5><p>这里并没有调用brk进行相应的内存释放，而是简单的将block中的free设置为1，标记为空闲即可！便于后面申请内存时重复使用！具体实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">my_free</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!ptr)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span> *<span class="title">block_ptr</span> =</span> get_block_ptr(ptr);</span><br><span class="line">  assert(block_ptr-&gt;<span class="built_in">free</span> == <span class="number">0</span>);</span><br><span class="line">  block_ptr-&gt;<span class="built_in">free</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">memset</span>(ptr, <span class="number">0</span>, block_ptr-&gt;size);  <span class="comment">// 清空内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="void-my-realloc-void-ptr-size-t-size"><a href="#void-my-realloc-void-ptr-size-t-size" class="headerlink" title="void *my_realloc(void *ptr, size_t size)"></a>void *my_realloc(void *ptr, size_t size)</h5><p>流程如下：</p>
<ul>
<li>当ptr指向为NULL，调用my_malloc申请 size 大小的内存！</li>
<li>当ptr指向内容非NULL时：<ul>
<li>如果ptr指向的block大于（满足）指定的size，则直接重复使用；</li>
<li>如果不是，则重新申请内容，并将内容复制到新内存中，同时调用my_free 释放原内容！</li>
</ul>
</li>
</ul>
<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由实内容的地址，获取 struct block_meta 头地</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> block_meta *<span class="title function_">get_block_ptr</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> block_meta *)ptr - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由struct block_meta 头地址，获得实内容的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">get_real_ptr</span><span class="params">(<span class="keyword">struct</span> block_meta *ptr)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (ptr + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有申请的内存块信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">log_mem</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">block_meta</span> *<span class="title">cur</span> =</span> global_base;</span><br><span class="line">  <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;addr: %p, is_free: %d, size: %ld, content: %s\n&quot;</span>, cur, cur-&gt;<span class="built_in">free</span>, cur-&gt;size, (<span class="type">const</span> <span class="type">char</span>*)get_real_ptr(cur));</span><br><span class="line">    cur = cur-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span>* p1 = my_malloc(<span class="number">16</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(p1, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = my_malloc(<span class="number">8</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(p2, <span class="string">&quot;my&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = my_malloc(<span class="number">64</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(p3, <span class="string">&quot;friend&quot;</span>);</span><br><span class="line"></span><br><span class="line">  log_mem();</span><br><span class="line"></span><br><span class="line">  my_free(p2);</span><br><span class="line">  <span class="type">void</span> *p4 = my_malloc(<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(p4, <span class="string">&quot;MY&quot;</span>);</span><br><span class="line">  log_mem();</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p5 = my_realloc(p4, <span class="number">12</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(p5, <span class="string">&quot;you are my&quot;</span>);</span><br><span class="line">  log_mem();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>addr: 0x5563feae2000, is_free: 0, size: 16, content: hello<br>addr: 0x5563feae2028, is_free: 0, size: 8, content: my<br>addr: 0x5563feae2048, is_free: 0, size: 64, content: friend<br>addr: 0x5563feae2000, is_free: 0, size: 16, content: hello<br>addr: 0x5563feae2028, is_free: 0, size: 8, content: MY<br>addr: 0x5563feae2048, is_free: 0, size: 64, content: friend<br>addr: 0x5563feae2000, is_free: 0, size: 16, content: hello<br>addr: 0x5563feae2028, is_free: 1, size: 8, content:<br>addr: 0x5563feae2048, is_free: 0, size: 64, content: friend<br>addr: 0x5563feb04000, is_free: 0, size: 12, content: you are my</p>
</blockquote>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>引用：<a href="https://danluu.com/malloc-tutorial/">https://danluu.com/malloc-tutorial/</a></p>
<p>完整代码：<a href="https://github.com/DefineGF/CComponents/tree/main/mini-malloc">https://github.com/DefineGF/CComponents/tree/main/mini-malloc</a></p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>mem</tag>
      </tags>
  </entry>
</search>
